name: ${PROJECT_NAME}

services:
  traefik:
    image: traefik:${TRAEFIK_VERSION:-v3.5.0}
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/acme:/acme
    command:
      - --global.checkNewVersion=false
      - --global.sendAnonymousUsage=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=${DOCKER_NETWORK:-nuxtship-dev}
      - --api.dashboard=false
      - --api.insecure=false
      - --log.level=WARN
    labels:
      - "traefik.enable=true"
    networks:
      - nuxtship

  logto:
    restart: unless-stopped
    image: ghcr.io/logto-io/logto:${LOGTO_VERSION:-1.30.1}
    entrypoint: sh -c "npm run cli db seed -- --swe && npm start"
    extra_hosts:
      - "${AUTH_DOMAIN}:host-gateway"
      - "${ADMIN_DOMAIN}:host-gateway"
    environment:
      DB_URL: postgres://logto:${LOGTO_DB_PASSWORD}@postgres:5432/logto
      ENDPOINT: https://${AUTH_DOMAIN}
      ADMIN_ENDPOINT: https://${ADMIN_DOMAIN}
      # Trust proxy headers from Traefik
      TRUST_PROXY_HEADER: true
      # Optional: SMTP configuration for email notifications
      LOGTO_SMTP_HOST: ${LOGTO_SMTP_HOST:-}
      LOGTO_SMTP_PORT: ${LOGTO_SMTP_PORT:-587}
      LOGTO_SMTP_USER: ${LOGTO_SMTP_USER:-}
      LOGTO_SMTP_PASSWORD: ${LOGTO_SMTP_PASSWORD:-}
      LOGTO_SMTP_FROM: ${LOGTO_SMTP_FROM:-auth@nuxtship.dev}
      LOGTO_SMTP_FROM_NAME: ${LOGTO_SMTP_FROMNAME:-NuxtShip}
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      # Auth service (port 3001)
      - "traefik.http.routers.logto-auth.rule=Host(`${AUTH_DOMAIN}`)"
      - "traefik.http.routers.logto-auth.entrypoints=websecure"
      - "traefik.http.routers.logto-auth.tls=true"
      - "traefik.http.routers.logto-auth.service=logto-auth"
      - "traefik.http.routers.logto-auth.middlewares=logto-auth-headers"
      - "traefik.http.services.logto-auth.loadbalancer.server.port=3001"
      # Admin console (port 3002)
      - "traefik.http.routers.logto-admin.rule=Host(`${ADMIN_DOMAIN}`)"
      - "traefik.http.routers.logto-admin.entrypoints=websecure"
      - "traefik.http.routers.logto-admin.tls=true"
      - "traefik.http.routers.logto-admin.service=logto-admin"
      - "traefik.http.routers.logto-admin.middlewares=logto-admin-headers"
      - "traefik.http.services.logto-admin.loadbalancer.server.port=3002"
      # Middleware for auth service
      - "traefik.http.middlewares.logto-auth-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.logto-auth-headers.headers.customrequestheaders.X-Forwarded-Host=${AUTH_DOMAIN}"
      # Middleware for admin console
      - "traefik.http.middlewares.logto-admin-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.logto-admin-headers.headers.customrequestheaders.X-Forwarded-Host=${ADMIN_DOMAIN}"
    networks:
      - nuxtship

  postgres:
    restart: unless-stopped
    image: postgres:${POSTGRES_VERSION:-17-alpine}
    environment:
      # Primary app database (PostgreSQL native creation)
      POSTGRES_USER: ${APP_DB_USER}
      POSTGRES_PASSWORD: ${APP_DB_PASSWORD}
      POSTGRES_DB: ${APP_DB_NAME}
      PGUSER: ${APP_DB_USER}
      # Variables for init script (admin user and logto)
      POSTGRES_ADMIN_PASSWORD: ${APP_DB_ADMIN_PASSWORD}
      LOGTO_DB_USER: ${LOGTO_DB_USER}
      LOGTO_DB_PASSWORD: ${LOGTO_DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/20-init-databases.sh:ro
    networks:
      - nuxtship
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 20s

volumes:
  postgres-data:

networks:
  nuxtship:
    name: ${DOCKER_NETWORK:-nuxtship-dev}
    driver: bridge